rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the admin of a specific room
    function isRoomAdmin(roomId) {
      return isAuthenticated() && get(/databases/$(database)/documents/rooms/$(roomId)).data.adminUID == request.auth.uid;
    }

    // Helper function to check if user is a registered player in a room (part of currentActivePlayers)
    function isPlayerInRoom(roomId) {
      return isAuthenticated() && get(/databases/$(database)/documents/rooms/$(roomId)).data.currentActivePlayers[request.auth.uid] != null;
    }

    // Rooms collection
    match /rooms/{roomId} {
      allow read: if isAuthenticated(); // All authenticated users can read room details (e.g., game status, rules, called numbers)
      allow create: if isAuthenticated(); // Any authenticated user can attempt to create a room (function validates admin)
      allow update: if isRoomAdmin(roomId); // Only room admin can update room (e.g., start/stop game, set rules, call numbers)
      allow delete: if isRoomAdmin(roomId); // Only room admin can delete room

      // Ticket Requests subcollection
      match /ticketRequests/{requestId} {
        allow read: if isRoomAdmin(roomId) || (isAuthenticated() && resource.data.userId == request.auth.uid); // Admin or player who made request
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid; // Player can create their own request
        allow update: if isRoomAdmin(roomId); // Only admin can approve/reject (status update)
        allow delete: if isRoomAdmin(roomId); // Admin can delete requests
      }
    }

    // GameTickets collection
    match /gameTickets/{ticketId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isRoomAdmin(resource.data.roomId)); // Player who owns ticket or admin of the room
      // Tickets are created by server (admin approval function)
      allow create: if false; // Deny direct client creation; server function handles this.
      // Tickets are generally immutable once created by server, player might mark numbers client-side but that's not a Firestore write here directly.
      // If player-side marking syncs to Firestore (not recommended for this field):
      // allow update (fields: ['marked']): if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update: if false; // Generally, tickets shouldn't be updatable by client after creation.
      allow delete: if isRoomAdmin(resource.data.roomId); // Admin can delete tickets (e.g. for cleanup)
    }

    // PrizeClaimsAudit collection
    match /prizeClaimsAudit/{claimId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isRoomAdmin(resource.data.roomId)); // Player who made claim or admin of room
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid; // Player can create their own claim
      // Admin updates status (approve/reject) via cloud function
      allow update: if false; // Deny direct client update; server function handles this.
      allow delete: if isRoomAdmin(resource.data.roomId); // Admin can delete claims (for cleanup/moderation)
    }

    // User Profiles (Optional - if you add a user profiles collection)
    // match /userProfiles/{userId} {
    //   allow read: if isAuthenticated();
    //   allow write: if isAuthenticated() && request.auth.uid == userId; // User can write to their own profile
    // }
  }
}
